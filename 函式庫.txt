// -----------------------------------------------------------
O .O
b
// -----------------------------------------------------------

// -----------------------------------------------------------
採用 - 階層式架構，下層可以使用上層，上層不可以使用下層模組
hahahalib\base - 基礎產生器
hahahalib\extend - 繼承修改產生器
hahahalib\composite - 基礎產生器組合的產生器

hahahalib\test - 測試產生器
hahahalib\dump - 冗餘產生器
hahahalib\garbage - 待刪產生器
hahahalib\depot - 倉庫 - 堆產生器

// -----------------------------------------------------------

// -----------------------------------------------------------
擺放方式
// -----------------------------------------------------------
g_plib\base\db\table\hahaha_generate_php_const.php
直白讀法
db\table - generate_php_const

// -----------------------------------------------------------
架構
// -----------------------------------------------------------
因為我這裡規劃是死的，也就是一個功能可能只有單一目的，"盡量少關聯多個檔案(有多關聯的另外整成一包)"，
所以不同語言基本上分開檔案寫，但可能放同一個資料夾，"這樣比較相似改"
假設
hahaha_generate_php_const.php
hahaha_generate_cpp_const.php

// ----------------------------------------------------------- 
產生器寫法
// ----------------------------------------------------------- 
方針 
// ------------------------ 
 -- 優先順序(上面優先) --
1. 方便使用 - 用起來舒服
2. 程式碼間少關聯 - 維護起來方便，不會互相卡
3. demo輸出樣式(文字即可) - 快速知道產出是什麼
 -- 
4. code易閱讀 - 好改
5. 減少冗於動作 - 不要浪費效能
6. 輸出整齊 - 品質
 -- 







// ----------------------------------------------------------- 
產生文件，因為是reuse部分，不是客製化套版
所以這樣寫也行

$text[] = "<?php";
$text[] = "";
$text[] = "namespace {$namespace}";
$text[] = "";
$text[] = "class {$class}";
$text[] = "{";
$text[] = "";
foreach ($fields_ as $key => &$field) 
{
    $const = strtoupper($field);
    $text[] = "\tconst {$const} = \"{$field}\";";
}
$text[] = "";
$text[] = "} "; 
// ----------------------------------------------------------- 

// ----------------------------------------------------------- 
 
// ----------------------------------------------------------- 

